Start Laravel 12: 16-05-2025:
============================
02. Environment Setup â€“ Install & Configure Laravel:
----------------------------------------------------
i) Install Xampp
ii) Install Composer
iii) Install MySQL Workbench
iv) Install Node js
v) VS Code:
VS Code Extentention:
a) Laravel
b)) PHP Intelephense




03. How to Install Laravel 12:
------------------------------
Command: composer create-project laravel/laravel studentManagement
Then, Command: cd studentManagement
Then, Command: code .

Run Command: php artisan serve



04. Laravel 12 MVC Explained:
-----------------------------
M: Model
V: View
C: Controller





05. Laravel 12 Routing Explained:
---------------------------------
Route::get('/', function(){
    return 'Hello from laravel';
});

Route::get('/about', function(){
    return "About Us";
});




06. Laravel 12 Route Grouping & Naming:
---------------------------------------
// Group Route Used Prefix and Group
// Name Route
// Route::get('/details/student', function(){
//     return "I am Student";
// });

// Route::get('/details/teacher', function(){
//     return "I am Teacher";
// });

Route::prefix('/details')->group(function(){
Route::get('/student', function(){
    return "I am Student";
})->name('student-details');

Route::get('/teacher', function(){
    return "I am Teacher";
})->name('teachers-details');
});






07. Laravel 12 Route Parameters & Fallback:
-------------------------------------------
a) Parameter Pass & Not Page Found:
Route::get('/student/{id}/{reg}', function($id, $reg){
    return "Student Number:" . " " . $id . "<br>" . "Registration Number: " . $reg;
});

Route::fallback(function(){
    return "This page is no found please try again";
});









08. Laravel 12 View Explainded - Indroduction to Blade Templates:
-----------------------------------------------------------------
a) Aboutus & Contactus View Create
Command: php artisan make:view aboutus
Command: php artisan make:view contactus

Edit resources>views>aboutus.blade.php:
<div>
    <h2>About Us</h2>
</div>


Edit resources>views>contactus.blade.php:
<div>
    <h2>Contact Us</h2>
</div>


2) Create Route:
Edit Routes>web.php:
Route::get('/about-us', function(){
    return view('aboutus');
});

Route::get('/contact-us', function(){
    return view('contactus');
});







09. Laravel 12 Passing Data from Route to View Explainded:
----------------------------------------------------------
09. a) Aboutus & Contactus View Create
Command: php artisan make:view aboutus
Command: php artisan make:view contactus

Edit resources>views>aboutus.blade.php:
<div>
    <h2>About Us</h2>
    <h2>Name: {{ $name }} </h2>
    <h2>Email: {{ $email }}</h2>
</div>


Edit resources>views>contactus.blade.php:
<div>
    <h2>Contact Us</h2>
    <h2>Name: {{ $name }} </h2>
    <h2>Email: {{ $email }}</h2>
</div>


09. b) Create Route:
Edit Routes>web.php:

Route::get('/about-us', function(){
    $name = "Tester";
    $email = "tester@gmail.com";
    // way-1
    // return view('aboutus')->with('name', $name)->with('email', $email);

    // way-2
    // return view('aboutus', compact('name', 'email'));

    // way-3
    // return view('aboutus', ['name' => $name, 'email' => $email]);
});

Route::view('/contact-us', 'contactus', ['name' => "Hassan", 'email' => "hassan@gmail.com"]);



09. c) Parameters Pass

Edit resources>views>aboutus.blade.php:
<div>
    <h2>About Us</h2>
    <h2>Name: {{ $name }} </h2>
    <h2>ID: {{ $id }}</h2>
</div>



Edit resources>views>contactus.blade.php:
<div>
    <h2>Contact Us</h2>
    <h2>Name: {{ request()->name }} </h2>
    <h2>ID: {{ request()->id }}</h2>
</div>


09. d) Edit Routes>web.php:
Route::get('/about-us/{name}/{id}', function($name, $id){
    return view('aboutus', compact('name', 'id'));

});

Route::view('/contact-us/{name}/{id}', 'contactus');
"hassan@gmail.com"]);






10. Laravel 12 Blade Directives - Master Templating Like a Pro:
---------------------------------------------------------------
10. a) Directives follow laravel Documentation.
Such as Directives:
@for ($i = 0; $i < 10; $i++)
        <p>{{ $i }}</p>
        @if ($i == 5)
            <h1>Hi this is {{ $i }}</h1>
        @endif
    @endfor









11. Laravel 12 Subviews & View Caching - Optimize Your Blade Templates:
-----------------------------------------------------------------------
11. a) Create Folder subview, then create file input.blade.php
Edit Resources>views>subview>input.blade.php:
<div class="form">
        <label for="name">Name</label>
        <input type="text" name="name" id="name" value="{{ $myName }}">
    </div>


11. B) Edit Resources>views>aboutus.blade.php:
<div>
    <h2>About Us</h2>
    <h2>Name: {{ $name }} </h2>
    <h2>ID: {{ $id }}</h2>

   @include('subview.input', [
    'myName' => $name,
   ])
</div>


11. C) Cache Clear:
Command: php artisan view:cache
Command: php artisan view:clear










12. Laravel 12 Creating Layouts with Blade for Reusable Templates:
------------------------------------------------------------------
12. A. i) Create Layouts Folder, Then Create app.blade.php file
Edit Resources>views>layouts>app.blade.php:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Demo</title>
    <link rel="stylesheet" href="{{ asset('assets/css/bootstrap.min.css') }}">
    @yield('styles')
</head>

<body>
    <nav class="navbar navbar-expand-lg bg-light navbar-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Logo</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mx-auto">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Features</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Pricing</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    @yield('content')
    <footer class="bg-dark text-white text-center py-3 fixed-bottom">
        <div class="container">
            <p class="mb-0">&copy; 2025 My Website. All rights reserved.</p>
        </div>
    </footer>
    <script src="{{ asset('assets/js/bootstrap.bundle.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery-3.7.0.min.js') }}"></script>
    @yield('scripts')
</body>

</html>
 







12. A. ii) Create aboutus.blade.php
Edit Resources>views>aboutus.blade.php:
@extends('layouts.app')
@section('styles')
<style>
    h2{
    text-align: center;
    font-size: 36px;
}
</style>
@endsection

@section('content')
<div class="container">
    <h2>About Us</h2>
    <p>lorem50</p>
</div>
@endsection

@section('scripts')
<script>
    alert('Hello');
</script>
@endsection








12. A. iii) Edit Route>web.php:
Route::get('/about', function(){
    return view('aboutus');
});








13 => Laravel 12 Creating First Controller Step by Step:
--------------------------------------------------------
13. A. i) Create Student Controller
Command: php artisan make:controller StudentController
Edit app>http>controller>StudentController.php:
// Index
    public function index(){
        return "Hello Student! I am Hassan";
    }

    // About
    public function about(){
        return "Hi About!";
    }




13. A. ii) Create Route
Edit Route>web.php:
// Student Contrller
// Route::get('/about-us', [StudentController::class, 'about']);
// Route::get('/index', [StudentController::class, 'index']);
Route::controller(StudentController::class)->group(function(){
    Route::get('/about-us', 'about');
Route::get('/index', 'index');
});









14 => Laravel 12 Passing Route Data to Controllers Explained:
-------------------------------------------------------------
14. A. i) Create Route>web.php
Route::get('/about-us/{name}/{id}', [StudentController::class, 'about']);



14. A. ii) Edit app>http>controller>StudentController.php:
// About
    public function about($name, $id){
        return "My Name is: " . $name . "<br>" . "ID: " . $id;
    }




14. B. i) Create Route>web.php:
Route::get('/about-us/{name}/{id}', [StudentController::class, 'about']);


14. B. ii) Edit app>http>controller>StudentController.php:
// About
    public function about($name, $id){
        return view('aboutus', compact('name', 'id'));
    }


14. B. iii) Edit Resources>views>about.blade.php:
<p>My Name: {{ $name }}</p>
        <p>ID: {{ $id }}</p>









16. => Laravel 12 Understanding Invoke & Resources Controllers:
---------------------------------------------------------------
16. A. i) Create Invoke Controller
Command: php artisan make:controller TestController --invokable
Edit app>http>controller>TestController.php:
public function __invoke(Request $request)
    {
        // Invokable
        return "Hi! Hassan";
    }



16. A. ii) Create Route>web.php:
// Invoke
Route::get('/invoke', TestController::class);




16. B. i) Create Resources Controller
Command: php artisan make:controller SecondTestController --resource
Edit app>http>controller>SecondTestController.php:
/**
     * Display a listing of the resource.
     */
    public function index()
    {
        //Index
        return "Resources Controller Index";
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }




16. B. ii) Create Route>web.php:
// Resources
Route::resource('/second-test', SecondTestController::class);






17 => Laravel 12 Introduction to Migrations - Manage Your Database Efficiently:
-------------------------------------------------------------------------------
17. A) Create MySQL Database & Connect Database
Edit .env:
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=student
DB_USERNAME=root
DB_PASSWORD=

Then, Command: php artisan migrate





18, 19, 20, 21 => Laravel 12 - How to Create Migrations for Your Database:
--------------------------------------------------------------------------
18. A. i) Create Table Just Up() and down()
Command: php artisan make:migration StudentTable
Edit Database>migrations>2025_05_26_122543_student_table.php:
public function up(): void
    {
        //
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        //
    }



18. A. ii) Create Schema With Table
Command: php artisan make:migration create_students_table
Edit Database>migrations>2025_05_26_122721_create_students_table.php:
 public function up(): void
    {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('students');
    }





18, 19. B. i) Column Add
Edit Database>migrations>2025_05_26_122721_create_students_table.php:
Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email');
            $table->integer('age');
            $table->timestamps();
        });

Then, Command: php artisan migrates





18, 19, 20. C. i) Add New Column
Command: php artisan make:migration addDateOfBirthStudents --table=students
Edit Database>migrations>2025_05_26_123747_add_date_of_birth_students.php:
public function up(): void
    {
        Schema::table('students', function (Blueprint $table) {
            $table->date('date_of_birth')->nullable();
            $table->enum('gender', ['m', 'f'])->default('m');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('students', function (Blueprint $table) {
            $table->dropColumn('date_of_birth');
            $table->dropColumn('gender');
        });
    }

Then, Command: php artisan migrate





18, 19, 20, 21. D. i) Rollback Migrations and Undo Changes:
Command: php artisan migrate:rollback

Some Change
Edit Database>migrations>2025_05_26_123747_add_date_of_birth_students.php:
public function up(): void
    {
        Schema::table('students', function (Blueprint $table) {
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade')->onUpdate('cascade');
            $table->date('date_of_birth')->nullable();
            $table->enum('gender', ['m', 'f'])->default('m');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('students', function (Blueprint $table) {
            $table->dropForeign('user_id');
            $table->dropColumn('user_id');
            $table->dropColumn('date_of_birth');
            $table->dropColumn('gender');
        });
    }
Then, Command: php artisan migrate





18, 19, 20, 21. D. ii) How Many step before delete:
Command: php artisan migrate:rollback --step=2
Need Edit & Then, Command: php artisan migrate




18, 19, 20, 21. D. iii) All Table Delete, it used only developer mode:
Command: php artisan migrate:reset

Need Edit & Then, Command: php artisan migrate



18, 19, 20, 21. D. iv) All Data Delete, it used only developer mode:
Command: php artisan migrate:fresh

Need Edit & Then, Command: php artisan migrate







22 => Introduction to Models:
-----------------------------
22. A) Create Model
Command: php artisan make:model Teacher

Create Model, Controller, & Migration Command: php artisan make:model Teacher -mc
Edit Database>migration>2025_05_29_114656_create_teachers_table.php:
 Schema::create('teachers', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('address');
            $table->timestamps();
        });

Then, Command: php artisan migrate


Edit app>models>Teacher.php
protected $guarded = [];


Edit app>htpp>controller>DepartmentTeacher.php:
// index
    public function index(){
        return Teacher::all();
    }


Create Route>web.php:
// Teachers
Route::get('/teachers', [TeacherController::class, 'index']);







23 => Laravel 12 Basic CRUD Operations using Models:
----------------------------------------------------
22. 23. A. i) Add Data
Edit app>http>controller>TeacherController.php:
// index
    public function index()
    {
        return Teacher::all();
    }

    // Add
    public function add()
    {
        $item          = new Teacher();
        $item->name    = "Ritul";
        $item->address = "Rajshahi";
        $item->save();
        return "Added Successfully!";
    }

    // Edit
    public function edit($id)
    {
        $item          = Teacher::findOrFail($id);
        $item->name    = "Ritul Mia";
        $item->address = "Lalmonirhat";
        $item->update();
        return "Edit Successfully!";
    }

    // Show
    public function show($id)
    {
        $item = Teacher::findOrFail($id);
        return $item;
    }

    // Delete
    public function delete($id)
    {
        $item = Teacher::findOrFail($id);
        $item->delete();
        return "Delete Successfully!";
    }



22. 23. A. ii) Create Route
Edit Routes>web.php:
// Teachers
Route::get('/teachers', [TeacherController::class, 'index']);
Route::get('/teachers-add', [TeacherController::class, 'add']);
Route::get('/teachers-edit/{id}', [TeacherController::class, 'edit']);
Route::get('/teachers-delete/{id}', [TeacherController::class, 'delete']);





24 => Laravel 12 Introduction to Factories for Database Seeding:
----------------------------------------------------------------
24. A. i) Create Fake Data
Command: php artisan make:factory TeacherFactory --model=Teacher
Edit Database>factories>StudentFactory.php:
return [
            //
            'name'    => $this->faker->name(),
            'address' => $this->faker->address(),
        ];



24. A. ii) Edit app>Models>Teacher.php:
// Factory
    use HasFactory;




24. A. iii) Edit Database>seeders>DatabaseSeeder.php:
Teacher::factory(100)->create();


Then, Command: php artisan db:seed






25 => Laravel 12 - How to Use Seeders for Database Seeding:
-----------------------------------------------------------
25. A. i) Create Database, Model & Controller
Command: php artisan make:model Country -mc

Edit Database>migrations>2025_05_29_141250_create_countries_table.php:
Schema::create('countries', function (Blueprint $table) {
            $table->id();
            $table->string('name')->nullable(false);
            $table->string('code')->nullable(false);
            $table->timestamps();
        });


Then, Command: php artisan migrate




Edit app>models>Country.php
//
    protected $guarded = [];


Edit app>http>controller>CountryController.php:




25. B. i) Create Seeder

Command: php artisan make:seeder CountrySeeder

Edit Databas>seeders>CountrySeeder.php:
// Country
        $countries = [
            ['name' => 'Afghanistan', 'code' => 'AF'],
            ['name' => 'Ã…land Islands', 'code' => 'AX'],
            ['name' => 'Albania', 'code' => 'AL'],
            ['name' => 'Algeria', 'code' => 'DZ'],
            ['name' => 'American Samoa', 'code' => 'AS'],
            ['name' => 'AndorrA', 'code' => 'AD'],
            ['name' => 'Angola', 'code' => 'AO'],
            ['name' => 'Anguilla', 'code' => 'AI'],
            ['name' => 'Antarctica', 'code' => 'AQ'],
            ['name' => 'Antigua and Barbuda', 'code' => 'AG'],
            ['name' => 'Argentina', 'code' => 'AR'],
            ['name' => 'Armenia', 'code' => 'AM'],
            ['name' => 'Aruba', 'code' => 'AW'],
            ['name' => 'Australia', 'code' => 'AU'],
            ['name' => 'Austria', 'code' => 'AT'],
            ['name' => 'Azerbaijan', 'code' => 'AZ'],
            ['name' => 'Bahamas', 'code' => 'BS'],
            ['name' => 'Bahrain', 'code' => 'BH'],
            ['name' => 'Bangladesh', 'code' => 'BD'],
            ['name' => 'Barbados', 'code' => 'BB'],
            ['name' => 'Belarus', 'code' => 'BY'],
            ['name' => 'Belgium', 'code' => 'BE'],
            ['name' => 'Belize', 'code' => 'BZ'],
            ['name' => 'Benin', 'code' => 'BJ'],
            ['name' => 'Bermuda', 'code' => 'BM'],
            ['name' => 'Bhutan', 'code' => 'BT'],
            ['name' => 'Bolivia', 'code' => 'BO'],
            ['name' => 'Bosnia and Herzegovina', 'code' => 'BA'],
            ['name' => 'Botswana', 'code' => 'BW'],
            ['name' => 'Bouvet Island', 'code' => 'BV'],
            ['name' => 'Brazil', 'code' => 'BR'],
            ['name' => 'British Indian Ocean Territory', 'code' => 'IO'],
            ['name' => 'Brunei Darussalam', 'code' => 'BN'],
            ['name' => 'Bulgaria', 'code' => 'BG'],
            ['name' => 'Burkina Faso', 'code' => 'BF'],
            ['name' => 'Burundi', 'code' => 'BI'],
            ['name' => 'Cambodia', 'code' => 'KH'],
            ['name' => 'Cameroon', 'code' => 'CM'],
            ['name' => 'Canada', 'code' => 'CA'],
            ['name' => 'Cape Verde', 'code' => 'CV'],
            ['name' => 'Cayman Islands', 'code' => 'KY'],
            ['name' => 'Central African Republic', 'code' => 'CF'],
            ['name' => 'Chad', 'code' => 'TD'],
            ['name' => 'Chile', 'code' => 'CL'],
            ['name' => 'China', 'code' => 'CN'],
            ['name' => 'Christmas Island', 'code' => 'CX'],
            ['name' => 'Cocos (Keeling) Islands', 'code' => 'CC'],
            ['name' => 'Colombia', 'code' => 'CO'],
            ['name' => 'Comoros', 'code' => 'KM'],
            ['name' => 'Congo', 'code' => 'CG'],
            ['name' => 'Congo, The Democratic Republic of the', 'code' => 'CD'],
            ['name' => 'Cook Islands', 'code' => 'CK'],
            ['name' => 'Costa Rica', 'code' => 'CR'],
            ['name' => 'Cote D\'Ivoire', 'code' => 'CI'],
            ['name' => 'Croatia', 'code' => 'HR'],
            ['name' => 'Cuba', 'code' => 'CU'],
            ['name' => 'Cyprus', 'code' => 'CY'],
            ['name' => 'Czech Republic', 'code' => 'CZ'],
            ['name' => 'Denmark', 'code' => 'DK'],
            ['name' => 'Djibouti', 'code' => 'DJ'],
            ['name' => 'Dominica', 'code' => 'DM'],
            ['name' => 'Dominican Republic', 'code' => 'DO'],
            ['name' => 'Ecuador', 'code' => 'EC'],
            ['name' => 'Egypt', 'code' => 'EG'],
            ['name' => 'El Salvador', 'code' => 'SV'],
            ['name' => 'Equatorial Guinea', 'code' => 'GQ'],
            ['name' => 'Eritrea', 'code' => 'ER'],
            ['name' => 'Estonia', 'code' => 'EE'],
            ['name' => 'Ethiopia', 'code' => 'ET'],
            ['name' => 'Falkland Islands (Malvinas)', 'code' => 'FK'],
            ['name' => 'Faroe Islands', 'code' => 'FO'],
            ['name' => 'Fiji', 'code' => 'FJ'],
            ['name' => 'Finland', 'code' => 'FI'],
            ['name' => 'France', 'code' => 'FR'],
            ['name' => 'French Guiana', 'code' => 'GF'],
            ['name' => 'French Polynesia', 'code' => 'PF'],
            ['name' => 'French Southern Territories', 'code' => 'TF'],
            ['name' => 'Gabon', 'code' => 'GA'],
            ['name' => 'Gambia', 'code' => 'GM'],
            ['name' => 'Georgia', 'code' => 'GE'],
            ['name' => 'Germany', 'code' => 'DE'],
            ['name' => 'Ghana', 'code' => 'GH'],
            ['name' => 'Gibraltar', 'code' => 'GI'],
            ['name' => 'Greece', 'code' => 'GR'],
            ['name' => 'Greenland', 'code' => 'GL'],
            ['name' => 'Grenada', 'code' => 'GD'],
            ['name' => 'Guadeloupe', 'code' => 'GP'],
            ['name' => 'Guam', 'code' => 'GU'],
            ['name' => 'Guatemala', 'code' => 'GT'],
            ['name' => 'Guernsey', 'code' => 'GG'],
            ['name' => 'Guinea', 'code' => 'GN'],
            ['name' => 'Guinea-Bissau', 'code' => 'GW'],
            ['name' => 'Guyana', 'code' => 'GY'],
            ['name' => 'Haiti', 'code' => 'HT'],
            ['name' => 'Heard Island and Mcdonald Islands', 'code' => 'HM'],
            ['name' => 'Holy See (Vatican City State)', 'code' => 'VA'],
            ['name' => 'Honduras', 'code' => 'HN'],
            ['name' => 'Hong Kong', 'code' => 'HK'],
            ['name' => 'Hungary', 'code' => 'HU'],
            ['name' => 'Iceland', 'code' => 'IS'],
            ['name' => 'India', 'code' => 'IN'],
            ['name' => 'Indonesia', 'code' => 'ID'],
            ['name' => 'Iran, Islamic Republic Of', 'code' => 'IR'],
            ['name' => 'Iraq', 'code' => 'IQ'],
            ['name' => 'Ireland', 'code' => 'IE'],
            ['name' => 'Isle of Man', 'code' => 'IM'],
            ['name' => 'Israel', 'code' => 'IL'],
            ['name' => 'Italy', 'code' => 'IT'],
            ['name' => 'Jamaica', 'code' => 'JM'],
            ['name' => 'Japan', 'code' => 'JP'],
            ['name' => 'Jersey', 'code' => 'JE'],
            ['name' => 'Jordan', 'code' => 'JO'],
            ['name' => 'Kazakhstan', 'code' => 'KZ'],
            ['name' => 'Kenya', 'code' => 'KE'],
            ['name' => 'Kiribati', 'code' => 'KI'],
            ['name' => 'Korea, Democratic People\'S Republic of', 'code' => 'KP'],
            ['name' => 'Korea, Republic of', 'code' => 'KR'],
            ['name' => 'Kuwait', 'code' => 'KW'],
            ['name' => 'Kyrgyzstan', 'code' => 'KG'],
            ['name' => 'Lao People\'S Democratic Republic', 'code' => 'LA'],
            ['name' => 'Latvia', 'code' => 'LV'],
            ['name' => 'Lebanon', 'code' => 'LB'],
            ['name' => 'Lesotho', 'code' => 'LS'],
            ['name' => 'Liberia', 'code' => 'LR'],
            ['name' => 'Libyan Arab Jamahiriya', 'code' => 'LY'],
            ['name' => 'Liechtenstein', 'code' => 'LI'],
            ['name' => 'Lithuania', 'code' => 'LT'],
            ['name' => 'Luxembourg', 'code' => 'LU'],
            ['name' => 'Macao', 'code' => 'MO'],
            ['name' => 'Macedonia, The Former Yugoslav Republic of', 'code' => 'MK'],
            ['name' => 'Madagascar', 'code' => 'MG'],
            ['name' => 'Malawi', 'code' => 'MW'],
            ['name' => 'Malaysia', 'code' => 'MY'],
            ['name' => 'Maldives', 'code' => 'MV'],
            ['name' => 'Mali', 'code' => 'ML'],
            ['name' => 'Malta', 'code' => 'MT'],
            ['name' => 'Marshall Islands', 'code' => 'MH'],
            ['name' => 'Martinique', 'code' => 'MQ'],
            ['name' => 'Mauritania', 'code' => 'MR'],
            ['name' => 'Mauritius', 'code' => 'MU'],
            ['name' => 'Mayotte', 'code' => 'YT'],
            ['name' => 'Mexico', 'code' => 'MX'],
            ['name' => 'Micronesia, Federated States of', 'code' => 'FM'],
            ['name' => 'Moldova, Republic of', 'code' => 'MD'],
            ['name' => 'Monaco', 'code' => 'MC'],
            ['name' => 'Mongolia', 'code' => 'MN'],
            ['name' => 'Montserrat', 'code' => 'MS'],
            ['name' => 'Morocco', 'code' => 'MA'],
            ['name' => 'Mozambique', 'code' => 'MZ'],
            ['name' => 'Myanmar', 'code' => 'MM'],
            ['name' => 'Namibia', 'code' => 'NA'],
            ['name' => 'Nauru', 'code' => 'NR'],
            ['name' => 'Nepal', 'code' => 'NP'],
            ['name' => 'Netherlands', 'code' => 'NL'],
            ['name' => 'Netherlands Antilles', 'code' => 'AN'],
            ['name' => 'New Caledonia', 'code' => 'NC'],
            ['name' => 'New Zealand', 'code' => 'NZ'],
            ['name' => 'Nicaragua', 'code' => 'NI'],
            ['name' => 'Niger', 'code' => 'NE'],
            ['name' => 'Nigeria', 'code' => 'NG'],
            ['name' => 'Niue', 'code' => 'NU'],
            ['name' => 'Norfolk Island', 'code' => 'NF'],
            ['name' => 'Northern Mariana Islands', 'code' => 'MP'],
            ['name' => 'Norway', 'code' => 'NO'],
            ['name' => 'Oman', 'code' => 'OM'],
            ['name' => 'Pakistan', 'code' => 'PK'],
            ['name' => 'Palau', 'code' => 'PW'],
            ['name' => 'Palestinian Territory, Occupied', 'code' => 'PS'],
            ['name' => 'Panama', 'code' => 'PA'],
            ['name' => 'Papua New Guinea', 'code' => 'PG'],
            ['name' => 'Paraguay', 'code' => 'PY'],
            ['name' => 'Peru', 'code' => 'PE'],
            ['name' => 'Philippines', 'code' => 'PH'],
            ['name' => 'Pitcairn', 'code' => 'PN'],
            ['name' => 'Poland', 'code' => 'PL'],
            ['name' => 'Portugal', 'code' => 'PT'],
            ['name' => 'Puerto Rico', 'code' => 'PR'],
            ['name' => 'Qatar', 'code' => 'QA'],
            ['name' => 'Reunion', 'code' => 'RE'],
            ['name' => 'Romania', 'code' => 'RO'],
            ['name' => 'Russian Federation', 'code' => 'RU'],
            ['name' => 'RWANDA', 'code' => 'RW'],
            ['name' => 'Saint Helena', 'code' => 'SH'],
            ['name' => 'Saint Kitts and Nevis', 'code' => 'KN'],
            ['name' => 'Saint Lucia', 'code' => 'LC'],
            ['name' => 'Saint Pierre and Miquelon', 'code' => 'PM'],
            ['name' => 'Saint Vincent and the Grenadines', 'code' => 'VC'],
            ['name' => 'Samoa', 'code' => 'WS'],
            ['name' => 'San Marino', 'code' => 'SM'],
            ['name' => 'Sao Tome and Principe', 'code' => 'ST'],
            ['name' => 'Saudi Arabia', 'code' => 'SA'],
            ['name' => 'Senegal', 'code' => 'SN'],
            ['name' => 'Serbia and Montenegro', 'code' => 'CS'],
            ['name' => 'Seychelles', 'code' => 'SC'],
            ['name' => 'Sierra Leone', 'code' => 'SL'],
            ['name' => 'Singapore', 'code' => 'SG'],
            ['name' => 'Slovakia', 'code' => 'SK'],
            ['name' => 'Slovenia', 'code' => 'SI'],
            ['name' => 'Solomon Islands', 'code' => 'SB'],
            ['name' => 'Somalia', 'code' => 'SO'],
            ['name' => 'South Africa', 'code' => 'ZA'],
            ['name' => 'South Georgia and the South Sandwich Islands', 'code' => 'GS'],
            ['name' => 'Spain', 'code' => 'ES'],
            ['name' => 'Sri Lanka', 'code' => 'LK'],
            ['name' => 'Sudan', 'code' => 'SD'],
            ['name' => 'Suriname', 'code' => 'SR'],
            ['name' => 'Svalbard and Jan Mayen', 'code' => 'SJ'],
            ['name' => 'Swaziland', 'code' => 'SZ'],
            ['name' => 'Sweden', 'code' => 'SE'],
            ['name' => 'Switzerland', 'code' => 'CH'],
            ['name' => 'Syrian Arab Republic', 'code' => 'SY'],
            ['name' => 'Taiwan, Province of China', 'code' => 'TW'],
            ['name' => 'Tajikistan', 'code' => 'TJ'],
            ['name' => 'Tanzania, United Republic of', 'code' => 'TZ'],
            ['name' => 'Thailand', 'code' => 'TH'],
            ['name' => 'Timor-Leste', 'code' => 'TL'],
            ['name' => 'Togo', 'code' => 'TG'],
            ['name' => 'Tokelau', 'code' => 'TK'],
            ['name' => 'Tonga', 'code' => 'TO'],
            ['name' => 'Trinidad and Tobago', 'code' => 'TT'],
            ['name' => 'Tunisia', 'code' => 'TN'],
            ['name' => 'Turkey', 'code' => 'TR'],
            ['name' => 'Turkmenistan', 'code' => 'TM'],
            ['name' => 'Turks and Caicos Islands', 'code' => 'TC'],
            ['name' => 'Tuvalu', 'code' => 'TV'],
            ['name' => 'Uganda', 'code' => 'UG'],
            ['name' => 'Ukraine', 'code' => 'UA'],
            ['name' => 'United Arab Emirates', 'code' => 'AE'],
            ['name' => 'United Kingdom', 'code' => 'GB'],
            ['name' => 'United States', 'code' => 'US'],
            ['name' => 'United States Minor Outlying Islands', 'code' => 'UM'],
            ['name' => 'Uruguay', 'code' => 'UY'],
            ['name' => 'Uzbekistan', 'code' => 'UZ'],
            ['name' => 'Vanuatu', 'code' => 'VU'],
            ['name' => 'Venezuela', 'code' => 'VE'],
            ['name' => 'Viet Nam', 'code' => 'VN'],
            ['name' => 'Virgin Islands, British', 'code' => 'VG'],
            ['name' => 'Virgin Islands, U.S.', 'code' => 'VI'],
            ['name' => 'Wallis and Futuna', 'code' => 'WF'],
            ['name' => 'Western Sahara', 'code' => 'EH'],
            ['name' => 'Yemen', 'code' => 'YE'],
            ['name' => 'Zambia', 'code' => 'ZM'],
            ['name' => 'Zimbabwe', 'code' => 'ZW'],
        ];
        DB::table('countries')->insert($countries);

Then, Command: php artisan db:seed --class=CountrySeeder


***Boundle:
-----------
Model, Migration, Controller, Seeder Create Command:
php artisan make:model seeder Cities -mcs









26 => Laravel 12 - Raw SQL vs Query Builder vs Eloquent:
--------------------------------------------------------
26. A) Best option Eloquent ORM
--------------------------------------------------------------------------------------------------------------------------------------------------------
Approach		Security		Performance			Flexibility			Maintainability
--------------------------------------------------------------------------------------------------------------------------------------------------------
Raw SQL			High Risk of SQL	Fastest because it		Fully customizable		Harder to maintain and
			injection if not	directly interacts with		allows complex queries		debug, requires manual
			property handled	the database							query writing
--------------------------------------------------------------------------------------------------------------------------------------------------------
Query Builder		Protects against	Faster than Eloquent but	Flexible, allows complex	Easier to maintain than
			SQL injection		slightly slower than Raw SQL	queries with readable syntax	Raw Sql but lacks full ORM Capabilites
--------------------------------------------------------------------------------------------------------------------------------------------------------
Eloquent ORM		Highly Secure,		Slowest due to			Less flexible for		Easiest to maintain
			Prevents SQL		abstraction overhead		highly optimized queries	follows object-oriented
			injection										Principles
--------------------------------------------------------------------------------------------------------------------------------------------------------


26. B) Best Use Case Query Builder
Raw SQL:	When performance is critical or complex queries are needed.
Query Builder:	When you need a balance between performance, securyity, and flexibility
Eloquent ORM:	When working with models, relationships, and prioritizing maintainability







27 => Laravel 12 - How to Insert Data Using Query Builder:
----------------------------------------------------------
27. A). i) Edit app>http>controller>TeacherController.php:
// Add Data
    public function add()
    {
        DB::table('teachers')->insert([
            'name'    => 'Shimul',
            'address' => 'Mymunsing',
        ]);
        return "Data Added Successfully!";
    }

// Multiple Data Add
    public function add()
    {
        DB::table('teachers')->insert([
            [
                'name'    => 'Runad',
                'address' => 'Shippur',
            ],
            [
                'name'    => 'Rana',
                'address' => 'Rasulpur',
            ],
            [
                'name'    => 'Murad',
                'address' => 'Kumedpur',

            ],
        ]);
        return "Data Added Successfully!";
    }


27. A. ii) Create Route>web.php:
Route::get('/teachers-add', [TeacherController::class, 'add']);






28 => Laravel 12  - How to Fetch Data Using Query Builder:
----------------------------------------------------------
28. A) Edit app>http>controller>TeacherController.php:
// Get Data
    public function getData()
    {
        // // All Data
        // $item = DB::table('teachers')
        //     ->get();

        // // Two Data
        // $item = DB::table('teachers')
        //     ->limit(2)
        //     ->get();

        // // First Single Data
        // $item = DB::table('teachers')
        //     ->first();

        // // Where id = 101
        // $item = DB::table('teachers')
        //     ->where('id', 101)
        //     ->first();

        // Where id = 101, Only Name
        $item = DB::table('teachers')
            ->select('name')
            ->where('id', 101)
            ->get();
        return $item;
    }


28. B) Create Route>web.php:
Route::get('/teachers', [TeacherController::class, 'getData']);









29 => Laravel 12 - How to Update Data Using Query Builder:
----------------------------------------------------------
29. A) Edit app>http>controller>TeacherController.php:
// Update
    public function update()
    {
        DB::table('teachers')
            ->where('id', 110)->update([
            'name'    => "Murad Khan",
            'address' => "Kumedpur Union",
        ]);
        return "Updated Successfully!";
    }


29. B) Create Route>web.php:
Route::get('/teachers-update', [TeacherController::class, 'update']);








30 => Laravel 12 - How to Delete Records Using Query Builder:
-------------------------------------------------------------
30. A) Edit app>http>controller>TeacherController.php:
// Delete
    public function destroy()
    {
        DB::table('teachers')
            ->where('id', 110)
            ->delete();
        return "Deleted Successfully!";
    }


30. B) Create Route>web.php:
Route::get('/teachers-destroy', [TeacherController::class, 'destroy']);







31 => Laravel 12 â€“ How to Use Aggregate Functions in Query Builder:
-------------------------------------------------------------------
31. A) Edit app>http>controller>TeacherController.php:
// Get Data
    public function getData()
    {
        // // Count
        // $item = DB::table('teachers')
        //     ->count();
        // return $item;

        // // Max Score
        // $item = DB::table('teachers')
        //     ->max('scores');
        // return $item;

        // // Minimum Score
        // $item = DB::table('teachers')
        //     ->min('scores');
        // return $item;

        // Average Score
        $item = DB::table('teachers')
            ->avg('scores');
        return $item;
    }








32 => Laravel 12 - How to Add Data Using Eloquent ORM:
------------------------------------------------------
32. A) Edit app>http>controller>TeacherController.php:
// Add Data
    public function add()
    {
        $item          = new Teacher();
        $item->name    = 'Babu';
        $item->address = "Chitagonj";
        $item->scores  = 66;
        $item->save();
        return "Data Added Successfully!";
    }






33 => Laravel 12 - How to Fetch Data Using Eloquent ORM:
--------------------------------------------------------
33. A) Edit app>http>controller>TeacherController.php:
// Get Data
    public function getData()
    {
        // All Data Fetch
        // $items = Teacher::get();

        // Alternate All Data Fetch
        // $items = Teacher::all();

        // All Data Fetch Only Id and Name
        $items = Teacher::select('id', 'name')->get();

        // Only 55 Id
        $items = Teacher::select('id', 'name')
            ->where('id', '55')
            ->get();

        // Alternate Way
        $items = Teacher::select('id', 'name')
            ->find(55);
        return $items;
    }





34 => Laravel 12 - How to Update Data Using Eloquent ORM:
---------------------------------------------------------
34. A) Edit app>http>controller>TeacherController.php:
// Update
    public function update()
    {
        // $item = Teacher::where('id', 101)->first();
        // Alternate Way
        $item=Teacher::findOrFail(101);
        $item->name="BabuMia";
        $item->address="Doha";
        $item->scores=99;
        $item->update();
        return "Updated Successfully!";
    }






35 => Laravel 12 - How to Delete Data Records Using Eloquent ORM:
-----------------------------------------------------------------
35. A) Edit app>http>controller>TeacherController.php:
// Delete
    public function destroy()
    {
       $item = Teacher::findOrFail(101);
       $item->delete();
        return "Deleted Successfully!";
    }







36 => Laravel 12 - How to Use Where Conditions:
-----------------------------------------------
36. A) Edit app>http>controller>TeacherController.php:
// Where Conditions
    public function whereConditions()
    {
        // // Data Find Where Greater than 98 Scores
        // $items = Teacher::where('scores', '>', 98)->get();
        // return $items;

        // // Data Find Where Greater than 50 Scores and With Out Where age 20-30
        // $items = Teacher::where('scores', '>', 50)
        //     ->where(function ($query) {
        //         $query->where('age', '<', 20)
        //             ->orWhere('age', '>', 30);
        //     })
        //     ->get();

        // // Where Between: 10-25
        // $items = Teacher::whereBetween('age', [10,25])->get();

        // // Where Not Between: 20 & 25
        // $items = Teacher::whereNotBetween('age', [20, 25])->get();

        // // WhereIn: 1,2,3,5,7
        // $items = Teacher::whereIn('id', [1,2,3,5,7])->get();

        // WhereNotIn: 1,2,3,5,7
        $items = Teacher::whereNotIn('id', [1, 2, 3, 5, 7])->get();
        return $items;
    }








37 => Laravel 12 - Using whereAll and whereAny Conditions:
----------------------------------------------------------
37. A) Edit app>http>controller>TeacherController.php:
// Where Conditions
    public function whereConditions()
    {
        // // Where Any: If match age or scores 25
        // $items = Teacher::whereAny(['age', 'scores'], '=', 25)
        //     ->get();

        // Where All: All match age and scores and id 20
        $items = Teacher::whereAll(['age', 'scores', 'id'], 20)
            ->get();
        return $items;
    }









38 => Laravel 12 - Master Query Scopes for Cleaner & Resuable Queries!:
-----------------------------------------------------------------------
38. A) Edit app>http>controller>TeacherController.php:
public function queryScope()
    {
        $items = Teacher::Something1()->get();
        return $items;
    }

    public function secondQuery(){
        $items = Teacher::Something2()
            ->get();
        return $items;
    }


38. B) Edit app>Models>Teacher.php:
// Scope Male
    public function scopeSomething1($query)
    {
        $return = $query->where('scores', 25)
            ->where('age', 25);
    }

    // Scope Female
    public function scopeSomething2($query)
    {
        $return = $query->where('scores', 20)
            ->where('age', 20);
    }



38. C) Create Route>web.php:
Route::get('/query-scope', [TeacherController::class, 'queryScope']);
Route::get('/second-query', [TeacherController::class, 'secondQuery']);







39 => Laravel 12 - Master Soft Deletes & Restore Delete Records!:
-----------------------------------------------------------------
39. A) Soft Delete:
39. A. i) SoftDeletes Column Add
Edit Database>migrations>2025_05_29_114656_create_teachers_table.php:
 Schema::create('teachers', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->enum('gender', ['m', 'f'])->default('m')->comment('m=male', 'f=female');
            $table->string('address');
            $table->integer('scores');
            $table->integer('age');
            $table->softDeletes();
            $table->timestamps();
        });



39. A. ii) Edit app>Models>Teacher.php:
// SoftDeletes Column
    use SoftDeletes;


39. A. iii) Edit app>http>controller>TeacherController.php:
// Delete
    public function destroy()
    {
        $item = Teacher::findOrFail(1);
        $item->delete();
        return "Deleted Successfully!";
    }



39. A. iv) Create Route>web.php:
Route::get('/teachers-destroy', [TeacherController::class, 'destroy']);






39. B) Delete Records Show:
39. B. i) Edit app>http>controller>TeacherController.php:
// Get Data
    public function getData()
    {
        // // Delete Records With Data Show
        // $items = Teacher::withTrashed()->get();

        // Only Delete Records Show
        $items = Teacher::onlyTrashed()->get();

        return $items;
    }


39. B. ii) Create Route>web.php:
Route::get('/teachers', [TeacherController::class, 'getData']);




39. C) Delte Data Restore:
39. C. i) Edit app>http>controller>TeacherController.php:
public function getData()
    {
        // Only Delete Records Show
        $items = Teacher::withTrashed()->find(1)->restore();

        return $items;
    }



39. C. ii) Create Route>web.php:
Route::get('/teachers', [TeacherController::class, 'getData']);




39. D) Permanent Delete:
39. D. i) Edit app>http>controller>TeacherController.php:
// Delete
    public function destroy()
    {
        $item = Teacher::findOrFail(1);
        $item->forceDelete();
        return "Deleted Successfully!";
    }


39. D. ii) Create Route>web.php:
Route::get('/teachers-destroy', [TeacherController::class, 'destroy']);







40, 41 => Laravel 12 - Learn CRUD(Read) with Eloquent, Implement Table Filters for Dynamic Search:
--------------------------------------------------------------------------------------------------
40. A. i) Create Route>web.php:
// Teacher
Route::prefix('/teacher')->controller(TeacherController::class)->group(function () {
    Route::get('/', 'index')->name('teacher.index');
});



40. A. ii) Edit app>http>controller>TeacherController.php:
public function index(Request $request)
    {
        $teachers = Teacher::when($request->search, function ($query) use ($request) {
            return $query->whereAny([
                'name',
                'age',
                'email',
                'dob',
                'scores',
                'gender',
            ], 'like', '%' . $request->search . '%');
        })->get();

        return view('teacher.list', compact('teachers'));
    }



40. A. iii) Create list.blade.php
Edit Resources>teacher>list.blade.php:
@extends('layouts.app')
@section('styles')
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .main {
            flex: 1;
        }

        .sidebar {
            background-color: #f8f9fa;
            padding: 20px;
            min-height: 100%;
        }

        .table th,
        .table td {
            vertical-align: middle;
            text-align: left;
        }

        .footer {
            background-color: #004080;
            color: white;
            text-align: center;
            padding: 10px 0;
        }

        .navbar {
            background-color: #004080;
        }

        .navbar a {
            color: white !important;
        }

        h2 {
            color: #004080;
        }
    </style>
@endsection

@section('content')
    <!-- Main Content -->
    <div class="col-md-10 p-4">
        <h2 class="text-center mb-4">Teacher</h2>
        <form action="{{ route('teacher.index') }}" method="GET">
            <div class="input-group mb-3 justify-content-center">
                <input type="text" class="form-control w-50" placeholder="Search" id="search" name="search" value="{{ request('search') }}">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </form>
        <table class="table table-bordered table-striped">
            <thead class="table-primary">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Age</th>
                    <th>Date of Birth</th>
                    <th>Gender</th>
                    <th>Score</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data rows go here -->
                @foreach ($teachers as $teacher)
                    <tr>
                        <td>{{ $teacher->id }}</td>
                        <td>{{ $teacher->name }}</td>
                        <td>{{ $teacher->email }}</td>
                        <td>{{ $teacher->age }}</td>
                        <td>{{ $teacher->dob }}</td>
                        <td>{{ $teacher->gender }}</td>
                        <td>{{ $teacher->scores }}</td>
                        <td class="d-flex">
                            <a href="#" class="btn btn-info btn-sm">Edit</a>
                            <a href="#" class="btn btn-danger btn-sm">Delete</a>
                        </td>
                    </tr>
                @endforeach
            </tbody>
        </table>
    </div>
@endsection

@section('scripts')
    <script></script>
@endsection







42 => Laravel 12 - Add Pagination for Better Data Navigation:
-------------------------------------------------------------
42. A. i) Edit app>http>controller>TeacherController.php:
public function index(Request $request)
    {
        $teachers = Teacher::when($request->search, function ($query) use ($request) {
            return $query->whereAny([
                'name',
                'age',
                'email',
                'dob',
                'scores',
                'gender',
            ], 'like', '%' . $request->search . '%');
        })->paginate(10);

        return view('teacher.list', compact('teachers'));
    }




42. A. ii) Edit Resources>teacher>list.blade.php:
<div class="paginationDiv">
        {{ $teachers->appends(request()->query())->links('pagination::bootstrap-5') }}
    </div>











43 => Laravel 12 - Learn CRUD(Create) Eloquent!:
------------------------------------------------
43. A. i) Create Route>web.php:
// Teacher
Route::prefix('/teacher')->controller(TeacherController::class)->group(function () {
    Route::get('/add', 'add')->name('teacher.add');
    Route::post('/create', 'create')->name('teacher.create');
});


43. A. ii) Edit app>http>controller>TeacherController.php:
// Add
    public function add()
    {
        return view('teacher.create');
    }

    // Create
    public function create(Request $request)
    {
        $teacher         = new Teacher();
        $teacher->name   = $request->name;
        $teacher->email  = $request->email;
        $teacher->dob    = $request->dob;
        $teacher->age    = $request->age;
        $teacher->gender = $request->gender;
        $teacher->scores = $request->scores;
        $teacher->save();

        return redirect()->route('teacher.index');
    }



43. A. iii) Edit Resources>views>teacher>list.blade.php
<a href="{{ route('teacher.add') }}" class="btn btn-info">Add Student</a>


43. A. iv) Create View: create.blade.php
Edit Resources>views>teacher>create.blade.php:
@extends('layouts.app')
@section('styles')
    <style>

    </style>
@endsection

@section('content')
    <!-- Main Content -->
    <div class="col-md-10 p-4">
        <div class="form-container">
            <h5 class="text-white bg-primary p-2 rounded">Teacher Registration</h5>
            <form action="{{ route('teacher.create') }}" method="POST">
                @csrf
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input type="text" name="name" class="form-control" placeholder="Enter name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <input type="email" name="email" class="form-control" placeholder="Enter email">
                </div>
                <div class="mb-3">
                    <label class="form-label">Age</label>
                    <input type="number" name="age" class="form-control" placeholder="Enter age">
                </div>
                <div class="mb-3">
                    <label class="form-label">Date of Birth</label>
                    <input type="date" name="dob" class="form-control" placeholder="Enter age">
                </div>
                <div class="mb-3">
                    <label class="form-label">Gender</label><br>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" name="gender" id="male" value="m" checked>
                        <label for="male" class="form-check-label">Male</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" name="gender" id="female" value="f">
                        <label for="female" class="form-check-label">Female</label>
                    </div>
                </div>

        </div>
        <div class="mb-3">
            <label class="form-label">Score</label>
            <input type="number" name="scores" class="form-control" placeholder="Enter score" value="0">
        </div>
        <button type="submit" class="btn btn-success">Submit</button>
        </form>
    </div>
    </div>
@endsection

@section('scripts')
    <script></script>
@endsection







44 => Laravel 12 - Learn CRUD (Update) with Eloquent:
-----------------------------------------------------
44. A. i)) Create Route>web.php:
// Teacher
Route::prefix('/teacher')->controller(TeacherController::class)->group(function () {
    Route::get('/edit/{id}', 'edit')->name('teacher.edit');
    Route::post('/edit/{id}', 'update')->name('teacher.update');
});


44. A. ii) Edit app>http>controller>TeacherController.php:
// Edit
    public function edit($id)
    {
        $teacher = Teacher::findOrFail($id);
        return view('teacher.edit', compact('teacher'));
    }

    // Update
    public function update(Request $request, $id)
    {
        $teacher         = Teacher::findOrFail($id);
        $teacher->name   = $request->name;
        $teacher->email  = $request->email;
        $teacher->dob    = $request->dob;
        $teacher->age    = $request->age;
        $teacher->gender = $request->gender;
        $teacher->scores = $request->scores;
        $teacher->update();

        return redirect()->route('teacher.index');
    }



44. A. iii) Edit Resources>views>teacher>list.blade.php:
<a href="{{ route('teacher.edit', $teacher->id) }}" class="btn btn-info btn-sm">Edit</a>



44. A. iv) Create View: edit.blade.php
Edit Resources>views>teacher>edit.blade.php:
@extends('layouts.app')
@section('styles')
    <style>

    </style>
@endsection

@section('content')
    <!-- Main Content -->
    <div class="col-md-10 p-4">
        <div class="form-container">
            <h5 class="text-white bg-primary p-2 rounded">Student Edit</h5>
            <form action="{{ route('teacher.update', $teacher->id) }}" method="POST">
                @csrf
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input type="text" name="name" value="{{ $teacher->name }}" class="form-control"
                        placeholder="Enter name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <input type="email" name="email" value="{{ $teacher->email }}" class="form-control"
                        placeholder="Enter email">
                </div>
                <div class="mb-3">
                    <label class="form-label">Age</label>
                    <input type="number" name="age" value="{{ $teacher->age }}" class="form-control"
                        placeholder="Enter age">
                </div>
                <div class="mb-3">
                    <label class="form-label">Date of Birth</label>
                    <input type="date" name="dob" value="{{ $teacher->dob }}" class="form-control"
                        placeholder="Enter age">
                </div>
                <div class="mb-3">
                    <label class="form-label">Gender</label><br>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" name="gender" id="male" value="m"
                            {{ $teacher->gender == 'm' ? 'checked' : '' }}>
                        <label for="male" class="form-check-label">Male</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" name="gender" id="female" value="f"
                            {{ $teacher->gender == 'f' ? 'checked' : '' }}>
                        <label for="female" class="form-check-label">Female</label>
                    </div>
                </div>

        </div>
        <div class="mb-3">
            <label class="form-label">Score</label>
            <input type="number" name="scores" value="{{ $teacher->scores }}" class="form-control"
                placeholder="Enter score" value="0">
        </div>
        <button type="submit" class="btn btn-success">Update</button>
        </form>
    </div>
    </div>
@endsection

@section('scripts')
    <script></script>
@endsection








45 => Laravel 12 CRUD Tutorial - Delete Data from Database:
-----------------------------------------------------------
45.A.ii) Edit Resources>views>teacher>list.blade.php:
<form action="{{ route('teacher.destroy', $teacher->id) }}" method="POST"
                                onsubmit="return confirm('Are you sure you want to delete?')" style="displa:inline">
                                @csrf
                                @method('DELETE')
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>



45. A. ii) Create Route>web.php:
Route::prefix('/teacher')->controller(TeacherController::class)->group(function () {
    Route::delete('/delete/{id}', 'destroy')->name('teacher.destroy');
});



45. A. iii) Edit app>htpp>controller>TeacherController.php:
// Delete
    public function destroy(Request $request, $id)
    {
        $teacher = Teacher::findOrFail($id);
        $teacher->delete();
        return redirect()->route('teacher.index');
    }










45 => Laravel 12 CRUD Tutorial - Validate User inout the Right Way:
-------------------------------------------------------------------
45. A. i) Edit Resources>views>teacher>create.blade.php:
@if ($errors->any())
                <div class="alert alert-danger">
                    <ul>
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif



45. B. ii) Edit app>http>controller>TeacherController.php:
// Create
    public function create(Request $request)
    {
        // Validation
        $request->validate([
            'name'   => 'required|string|max:255',
            'email'  => 'required|email|unique:teachers,email',
            'age'    => 'required|integer|min:1|max:100',
            'dob'    => 'required|date',
            'gender' => 'required|in:m,f',
            'scores' => 'required|integer|min:1|max:100',
        ], [
            'name.required' => 'Please Write Teacher Name',
            'age.max'       => 'Teacher can not be older than 100',
            'email.email'   => 'Please enter a valid email address',
            'email.unique'  => 'This email is already taken',
        ]);

        $teacher         = new Teacher();
        $teacher->name   = $request->name;
        $teacher->email  = $request->email;
        $teacher->dob    = $request->dob;
        $teacher->age    = $request->age;
        $teacher->gender = $request->gender;
        $teacher->scores = $request->scores;
        $teacher->save();

        return redirect()->route('teacher.index');
    }

























